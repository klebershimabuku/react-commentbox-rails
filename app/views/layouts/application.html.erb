<!DOCTYPE html>
<html>
<head>
  <title>ReactCommentsboxRails</title>
  <%= stylesheet_link_tag    'application', media: 'all' %>
  <%= javascript_include_tag 'application' %>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/showdown/0.3.1/showdown.min.js"></script>
  <%= csrf_meta_tags %>
</head>
<body>

  <div id="content"></div>

  <script type="text/jsx">
    /** @jsx React.DOM */
    var CommentBox = React.createClass({
      getInitialState: function() {
        return {data:[]};
      },
      loadCommentsFromServer: function() {
        $.ajax({
          url: this.props.url,
          dataType: 'json',
          success: function(data) {
            this.setState({ data: data });
          }.bind(this),
          error: function(data) {
            console.error(this.props.url, status, err.toString());
          }.bind(this)
        });
      },
      componentWillMount: function() {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
      },
      handleCommentSubmit: function(comment) {
        var comments = this.state.data;
        var newComment = comments.concat([comment]);
        this.setState({data: newComment});
        $.ajax({
          url: this.props.url,
          dataType: 'json',
          type: 'POST',
          data: comment,
          success: function(data) {
            this.setState({data: data});
          }.bind(this),
          error: function(xhr, status, err) {
            console.log(this.props.url, status, err.toString());
          }.bind(this)
        });
      },
      render: function() {
        return (
          <div className="commentBox">
            <h1>Comments</h1>
            <CommentList data={this.state.data} />
            <CommentForm onCommentSubmit={this.handleCommentSubmit} />
          </div>
        );
      }
    });

    var CommentList = React.createClass({
      render: function() {
        var commentNodes = this.props.data.map(function(comment) {
          return <Comment author={comment.author}>{comment.comment}</Comment>;
        });
        return (
          <div className="commentList">
            {commentNodes}
          </div>
        );
      }
    });

    var converter = new Showdown.converter();
    var Comment = React.createClass({
      render: function() {
        var rawMarkup = converter.makeHtml(this.props.children.toString());
        return (
          <div className="comment">
            <h2 className="commentAuthor">{this.props.author}</h2>
            <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
          </div>
        );
      }
    });

    var CommentForm = React.createClass({
      handleSubmit: function() {
        var author = this.refs.author.getDOMNode().value.trim();
        var comment = this.refs.comment.getDOMNode().value.trim();
        this.props.onCommentSubmit({author: author, comment: comment});
        this.refs.comment.getDOMNode().value = '';
        this.refs.author.getDOMNode().value = '';
        return false;
      },
      render: function() {
        return (
          <form className="commentForm" onSubmit={this.handleSubmit}>
            <input type="text" placeholder="Your name" ref="author" />
            <input type="text" placeholder="Say something.." ref="comment" />
            <input type="submit" value="Post" />
          </form>
        );
      }
    });

    React.renderComponent(<CommentBox url="/comments" pollInterval={2000000} />, document.getElementById('content'));
  </script>

</body>
</html>
